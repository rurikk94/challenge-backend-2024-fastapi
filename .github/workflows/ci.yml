name: FastAPI Challenge

on:
  push:
    branches: [ 'main', 'feature/**']
    tags: [ 'v*']
  # pull_request:
  #   branches: [ 'main' ]

env:
  PROJECT_ID: photos-dev-408720
  SERVICE: challenge
  REGION: us-central1

jobs:

  code-quality:
    name: Check coding standards
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.10.11
          cache: poetry

      - name: Install Python dependencies
        run: poetry install

      - name: Check code formatting
        run: poetry run poe black-check


  test:
    name: Run tests
    needs: code-quality
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: user
          POSTGRES_DB: challenge
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.10.11
          cache: poetry

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run poe test-unit

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: htmlcov

  deploy:
    name: Deploy on Cloud Run
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:          
          # workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          # service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com
          credentials_json: '${{ secrets.SA_CREDENTIALS }}'
        

      - name: Deploy to Cloud Run
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v0'
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          source: ./src

#   docker:
#     name: Build and Push to DockerHub
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3

#       - name: Docker meta
#         id: meta
#         uses: docker/metadata-action@v4
#         with:
#           images: san99tiago/fastapi-docker-github-actions

#       - name: Login to Docker Hub
#         if: github.event_name != 'pull_request'
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: src
#           push: ${{ github.event_name != 'pull_request' }}
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
